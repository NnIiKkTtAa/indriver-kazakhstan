import streamlit as st
import sqlite3
import pandas as pd
from PIL import Image
import os
import random
from datetime import datetime
from predict import predict
from database import taxi_db

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
taxi_db.init_db()

# –ó–∞–≥—Ä—É–∑–∫–∞ CSS
def load_css():
    with open("styles.css", "r", encoding="utf-8") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

load_css()

st.set_page_config(layout="wide", page_title="Indriver Kazakhstan", page_icon="üöó")

# —Ö–µ–¥–µ—Ä
st.markdown("""
<div class="header-container">
    <h1 class="main-header">üöó Indriver Kazakhstan</h1>
    <div class="kz-flag">
        <h3>üá∞üáø –õ—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å —Ç–∞–∫—Å–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ</h3>
    </div>
</div>
""", unsafe_allow_html=True)

# –°–∞–π–¥–±–∞—Ä —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞
with st.sidebar:
    st.markdown('<div class="city-selector">', unsafe_allow_html=True)
    city = st.selectbox("üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", 
                       ["–ê–ª–º–∞—Ç—ã", "–ê—Å—Ç–∞–Ω–∞", "–®—ã–º–∫–µ–Ω—Ç", "–ê–∫—Ç–æ–±–µ", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞"])
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    if st.button("üë®‚Äçüíº –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π", use_container_width=True):
        drivers = taxi_db.get_available_drivers()
        if not drivers.empty:
            st.sidebar.write("### üöï –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏:")
            for _, driver in drivers.iterrows():
                st.sidebar.markdown(f"""
                <div class="driver-info">
                    <div class="driver-name">{driver['name']}</div>
                    <div class="driver-car">{driver['car_model']} ({driver['car_number']})</div>
                    <div class="driver-rating">‚≠ê {driver['rating']}/5.0</div>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.sidebar.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
tab1, tab2 = st.tabs(["üì∏ –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", "üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"])

with tab1:
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≥—Ä—è–∑–Ω—ã–π –ª–∏ –æ–Ω –∏ –µ—Å—Ç—å –ª–∏ –Ω–∞ –Ω–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è.")

    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(uploaded_file)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.image(image, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', use_container_width=True)

        with col2:
            st.write("### –ê–Ω–∞–ª–∏–∑...")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è predict.py
            with open("temp_image.jpg", "wb") as f:
                f.write(uploaded_file.getbuffer())

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            try:
                if image.size[0] < 100 or image.size[1] < 100:
                    st.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
                else:
                    with st.spinner('–ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...'):
                        prediction = predict("temp_image.jpg")
                    st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

                    if prediction and prediction['cleanliness']['class'] != '–æ—à–∏–±–∫–∞':
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                        st.markdown("""
                        <div class="analysis-result">
                            <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</h4>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        col_clean, col_damage = st.columns(2)
                        
                        with col_clean:
                            st.subheader("üßπ –ß–∏—Å—Ç–æ—Ç–∞:")
                            cleanliness_class = prediction['cleanliness']['class'].capitalize()
                            cleanliness_conf = prediction['cleanliness']['confidence']
                            st.progress(cleanliness_conf)
                            st.metric(label="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=cleanliness_class, delta=f"{cleanliness_conf:.1%} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
                            
                        with col_damage:
                            st.subheader("üîß –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:")
                            damage_class = prediction['damage']['class'].capitalize()
                            damage_conf = prediction['damage']['confidence']
                            st.progress(damage_conf)
                            st.metric(label="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=damage_class, delta=f"{damage_conf:.1%} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
                        
                        # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏
                        st.markdown("---")
                        st.subheader("üöï –í—ã–∑–æ–≤ —Ç–∞–∫—Å–∏")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
                        drivers = taxi_db.get_available_drivers()
                        
                        if not drivers.empty:
                            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                            random_driver = drivers.sample(1).iloc[0]
                            driver_id = random_driver['id']
                            driver_name = random_driver['name']
                            driver_car = random_driver['car_model']
                            
                            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω—ã
                            price = random.randint(500, 2000)
                            
                            st.markdown(f"""
                            <div class="driver-card">
                                <h3>–ù–∞–π–¥–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å! üéâ</h3>
                                <p><strong>üë®‚Äçüíº –í–æ–¥–∏—Ç–µ–ª—å:</strong> {driver_name}</p>
                                <p><strong>üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</strong> {driver_car}</p>
                                <p><strong>‚≠ê –†–µ–π—Ç–∏–Ω–≥:</strong> {random_driver['rating']}/5.0</p>
                                <div class="price-tag">
                                    üí∞ –¶–µ–Ω–∞: {price} ‚Ç∏
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            if st.button("‚úÖ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏", type="primary", use_container_width=True):
                                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                                order_id = taxi_db.create_order(
                                    driver_id=driver_id,
                                    from_address=f"—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123, {city}",
                                    to_address=f"—É–ª. –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è, 456, {city}",
                                    price=price,
                                    cleanliness=prediction['cleanliness']['class'],
                                    damage=prediction['damage']['class'],
                                    cleanliness_confidence=prediction['cleanliness']['confidence'],
                                    damage_confidence=prediction['damage']['confidence']
                                )
                                st.success(f"üéâ –¢–∞–∫—Å–∏ –≤—ã–∑–≤–∞–Ω–æ! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}")
                                st.info(f"üöó –í–æ–¥–∏—Ç–µ–ª—å {driver_name} —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç –≤ {city}")
                        else:
                            st.warning("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π")

                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists("temp_image.jpg"):
                    os.remove("temp_image.jpg")

with tab2:
    st.header("üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
    st.info("–§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    st.markdown("""
    <div class="history-item">
        <strong>–ó–∞–∫–∞–∑ #001</strong> - 1500 ‚Ç∏ - –ê–ª–º–∞—Ç—ã<br>
        <small>–í–æ–¥–∏—Ç–µ–ª—å: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (Kia Rio)</small>
    </div>
    <div class="history-item">
        <strong>–ó–∞–∫–∞–∑ #002</strong> - 1200 ‚Ç∏ - –ê—Å—Ç–∞–Ω–∞<br>
        <small>–í–æ–¥–∏—Ç–µ–ª—å: –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞ (Hyundai Solaris)</small>
    </div>
    """, unsafe_allow_html=True)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #6c757d;">
    <p>üöó Indriver Kazakhstan ‚Ä¢ üá∞üáø –° –ª—é–±–æ–≤—å—é –∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É</p>
    <p>¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã</p>
</div>
""", unsafe_allow_html=True)